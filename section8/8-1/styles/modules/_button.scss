.btn {
    position: relative;
    display: inline-block;
    background-color: $cWhite;
    border: 1px solid $cBlack;
    font-weight: 600;
    padding: 10px 40px;
    margin: 10px auto;
    cursor: pointer;
    transition: all 0.3s;
    color: $cBlack;
    text-decoration: none !important;

    // ホバーすると背景が黒になり、影が発生するボタン
    &.float {
        &:hover {
            background-color: $cBlack;
            color: $cWhite;
            box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);
        }
    }

    // ホバーすると背景が白になり、影が消えるボタン
    &.filled {
        background-color: $cBlack;
        color: $cWhite;
        box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);

        &:hover {
            background-color: $cWhite;
            color: $cBlack;
            box-shadow: none;
        }
    }

    // ホバーすると文字の間隔が広がるボタン
    &.letter-spacing {
        &:hover {
            background-color: $cBlack;
            color: $cWhite;
            // 文字幅の設定
            letter-spacing: 3px;
        }
    }

    // ホバーするとボタンと影が逆方向に移動する
    &.shadow {
        box-shadow: none;

        &:hover {
            // 要素を移動させる。translate(x軸方向への移動量, y軸方向への移動量)
            transform: translate(-2.5px, -2.5px);
            box-shadow: 5px 5px 0 0 $cBlack;
        }
    }

    // ホバーするとあたかもボタンが押されているように見える
    &.solid {
        box-shadow: 2px 2px 0 0 $cBlack;
        // 要素の角を丸める
        border-radius: 7px;
        
        &:hover {
            // 影を隠したいので、影の大きさの分だけ移動させる
            transform: translate(2px, 2px);
            box-shadow: none;
        }
    }

    // ホバーすると回転するボタン
    &.rotate {
        transform: none;
        
        &:hover {
            // transformは複数の動きを設定することが可能
            transform: rotate(10deg) scale(1.5, 1.5);
            color: $cWhite;
            background-color: $cBlack;
            box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);
            // transformの動きの基準点を設定 px単位でも設定可能
            transform-origin: center center;
        }
    }

    // ホバーすると背景がスライドするボタン
    &.bg-slide {
        overflow: hidden;
        z-index: 0;
        transition: color 0.3s ease 0.1s;

        // ::before は擬似要素と呼ばれ、ここでは .btn.bg-slide要素の前に挿入される。後ろに挿入する場合は ::after を指定する。
        &::before {

            // 擬似要素を使用する場合は content は必須。何も指定しない場合は、''でよい。
            content: '';
            position: absolute;
            // display: inline-block; で height と width を指定できる;
            display: inline-block;
            background-color: $cBlack;
            top: 0px;
            left: 0px;
            height: 100%;
            width: 100%;
            // x軸方向への移動
            transform: translateX(-100%);
            z-index: -1;
            transition: transform 0.3s;
        }

        &:hover {
            color: $cWhite;
            &::before {
                transform: none;
            }
        }
    }

    &.cover-3d {
        // 以下の2要素は3dアニメーションを設定するには必須の項目。
        // 3dアニメーションを使用するという設定
        transform-style: preserve-3d;
        // どれくらい視点が対象と離れているかの設定
        perspective: 1000px;
        // (なくても良い) x軸方向, y軸方向の視点の変更
        perspective-origin: 50% 50%;

        // 3dアニメーションを追加すると、z-index が無効になってしまうため、前面に配置したい場合はtranslateZを使用する。
        & span {
            display: inline-block;
            transform: translateZ(20px);
        }
        
        &::before {
            content: '';
            position: absolute;
            display: inline-block;
            background-color: $cBlack;
            top: 0px;
            left: 0px;
            height: 100%;
            width: 100%;
            // x軸を中心に回転
            transform: rotateX(90deg);
            transform-origin: top center;
            transition: all 0.3s;

            // 要素の透明度(0~1の範囲で設定可能)
            opacity: 0;
        }
        
        &:hover {
            color: $cWhite;
            &::before {
                transform: none;
                opacity: 1;
                z-index: -1;
            }
        }
    }
}

.cover-btn {
    background-color: $cWhite;
    border: 1px solid $cBlack;
    color: $cBlack;
    padding: 10px 40px;
    font-weight: 600;
    cursor: pointer;
    position: relative;
    transition: all 0.3s;

    // 以下の2要素は3dアニメーションを設定するには必須の項目。
    // 3dアニメーションを使用するという設定
    transform-style: preserve-3d;
    // どれくらい視点が対象と離れているかの設定
    perspective: 1000px;
    // (なくても良い) x軸方向, y軸方向の視点の変更
    perspective-origin: 50% 50%;

    // 3dアニメーションを追加すると、z-index が無効になってしまうため、前面に配置したい場合はtranslateZを使用する。
    & span {
        display: inline-block;
        transform: translateZ(20px);
    }
    
    &::before {
        content: '';
        position: absolute;
        display: inline-block;
        background-color: $cBlack;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
        // x軸を中心に回転
        transform: rotateX(90deg);
        transform-origin: top center;
        transition: all 0.3s;

        // 要素の透明度(0~1の範囲で設定可能)
        opacity: 0;
    }
    
    &:hover {
        color: $cWhite;
        &::before {
            transform: none;
            opacity: 1;
        }
    }
}

.btn-cubic {

    position: relative;
    display: inline-block;
    margin: 0 auto;
    cursor: pointer;
    transition: all 0.3s;
    width: 150px;
    height: 50px;

    transform-style: preserve-3d;
    perspective: 300px;
    font-weight: 600;
    
    & span {
        position: absolute;
        top: 0;
        left: 0;
        border: 1px solid $cBlack;
        display: inline-block;
        width: 100%;
        height: 100%;
        
        // 親要素の中央に文字を配置したい場合は、line-height を 親要素の高さに設定する。
        line-height: 50px;
        text-align: center;
        transition: all 0.3s;

        // 今回のアニメーションは、回転しつつ半分の高さだけ下方に移動するというものであるから、以下のような記述となる。
        transform-origin: center center -25px;
    }

    & .hovering {
        color: $cWhite;
        background-color: $cBlack;
        transform: rotateX(90deg);
        opacity: 0;
    }

    & .default {
        color: $cBlack;
        background-color: $cWhite;
        transform: rotateX(0);
    }

    &:hover {
        & .hovering {
            transform: rotateX(0);
            opacity: 1;
        }

        & .default {
            transform: rotateX(-90deg);
        }
    }
}