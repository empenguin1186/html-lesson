@import "mixin";

$cWhite: white;
$cBlack: black;

.try {
  & .btn {
    position: relative;
    display: inline-block;
    background-color: $cWhite;
    border: 1px solid $cBlack;
    font-weight: 600;
    padding: 10px 40px;
    margin: 10px auto;
    cursor: pointer;
    transition: all 0.3s;
    color: $cBlack;
    text-decoration: none !important;

    // ホバーすると背景が黒になり、影が発生するボタン
    &.float {
      &:hover {
        background-color: $cBlack;
        color: $cWhite;
        box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);
      }
    }

    // ホバーすると背景が白になり、影が消えるボタン
    &.filled {
      background-color: $cBlack;
      color: $cWhite;
      box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);

      &:hover {
        background-color: $cWhite;
        color: $cBlack;
        box-shadow: none;
      }
    }

    // ホバーすると文字の間隔が広がるボタン
    &.letter-spacing {
      &:hover {
        background-color: $cBlack;
        color: $cWhite;
        // 文字幅の設定
        letter-spacing: 3px;
      }
    }

    // ホバーするとボタンと影が逆方向に移動する
    &.shadow {
      box-shadow: none;

      &:hover {
        // 要素を移動させる。translate(x軸方向への移動量, y軸方向への移動量)
        transform: translate(-2.5px, -2.5px);
        box-shadow: 5px 5px 0 0 $cBlack;
      }
    }

    // ホバーするとあたかもボタンが押されているように見える
    &.solid {
      box-shadow: 2px 2px 0 0 $cBlack;
      // 要素の角を丸める
      border-radius: 7px;
      
      &:hover {
        // 影を隠したいので、影の大きさの分だけ移動させる
        transform: translate(2px, 2px);
        box-shadow: none;
      }
    }

    // ホバーすると回転するボタン
    &.rotate {
      transform: none;
      
      &:hover {
        // transformは複数の動きを設定することが可能
        transform: rotate(10deg) scale(1.5, 1.5);
        color: $cWhite;
        background-color: $cBlack;
        box-shadow: 5px 5px 10px 0 rgba(0, 0, 0, 0.5);
        // transformの動きの基準点を設定 px単位でも設定可能
        transform-origin: center center;
      }
    }
    
    // ホバーすると背景がスライドするボタン
    &.bg-slide {
      overflow: hidden;
      z-index: 0;
      transition: color 0.3s ease 0.1s;

      // ::before は擬似要素と呼ばれ、ここでは .btn.bg-slide要素の前に挿入される。後ろに挿入する場合は ::after を指定する。
      &::before {

        // 擬似要素を使用する場合は content は必須。何も指定しない場合は、''でよい。
        content: '';
        position: absolute;
        // display: inline-block; で height と width を指定できる;
        display: inline-block;
        background-color: $cBlack;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
        // x軸方向への移動
        transform: translateX(-100%);
        z-index: -1;
        transition: transform 0.3s;
      }

      &:hover {
        color: $cWhite;
        &::before {
            transform: none;
        }
      }
    }
  }

  .btn2 {

    position: relative;
    display: inline-block;
    margin: 0 auto;
    cursor: pointer;
    transition: all 0.3s;
    width: 150px;
    height: 50px;

    // ホバーすると90度回転するボタン
    &.cubic {
      transform-style: preserve-3d;
      perspective: 300px;
      
      & span {
        position: absolute;
        top: 0;
        left: 0;
        border: 1px solid $cBlack;
        display: inline-block;
        width: 100%;
        height: 100%;
        
        // 親要素の中央に文字を配置したい場合は、line-height を 親要素の高さに設定する。
        line-height: 50px;
        text-align: center;
        transition: all 0.3s;

        // 今回のアニメーションは、回転しつつ半分の高さだけ下方に移動するというものであるから、以下のような記述となる。
        transform-origin: center center -25px;
      }

      & .hovering {
        color: $cWhite;
        background-color: $cBlack;
        transform: rotateX(90deg);
        opacity: 0;
      }

      & .default {
        color: $cBlack;
        background-color: $cWhite;
        transform: rotateX(0);
      }

      &:hover {
        & .hovering {
          transform: rotateX(0);
          opacity: 1;
        }
  
        & .default {
          transform: rotateX(-90deg);
        }
      }
    }
  }

  .loader {
    display: flex;
    
    & .spinner {
      width: 40px;
      height: 40px;
      margin: 100px auto;
      background-color: black;
      transform-origin: center center;
  
      @include animation(
        $name: sk-rotateplane,
        $duration: 1.2s,
        $iteration-count: infinite,
      )
    }
  
    & .double-spinner {
      position: relative;
      text-align: center;
      margin: 100px auto;
      width: 40px;
      height: 40px;
  
      & div {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        border-radius: 50%;
        background-color: black;
        opacity: 0.6;
  
        @include animation(
          $name: sk-bounce,
          $duration: 2s,
          $timing-function: ease-in-out,
          $iteration-count: infinite
        );
  
        &:nth-child(1) {
          animation-delay: 1s;
        }
      }
    }
  
    & .rect-spinner {
      margin: 100px auto;
      width: 50px;
      height: 40px;
      text-align: center;
      letter-spacing: -2px;
  
      & div {
        display: inline-block;
        width: 6px;
        height: 100%;
        background-color: black;
  
        @include animation(
          $name: sk-stretchdelay,
          $duration: 2.4s,
          $delay: 0.2s,
          $timing-function: ease-in-out,
          $iteration-count: infinite
        );
  
        @for $i from 1 through 5 {
          &:nth-child(#{$i}) {
            animation-delay: 0.1s * $i;
          }
        }
      }
    }
  }

}

@keyframes sk-rotateplane {
  0% {
    transform: rotateY(0deg);
  }
  50% {
    transform: rotateY(180deg);
  }
  100% {
    transform: rotateZ(180deg);
  }
}

@keyframes sk-bounce {
  0%,100% {
    transform: scale(0);
  }
  50% {
    transform: scale(1);
  }
}

@keyframes sk-stretchdelay {
  0%,40%,60%,100% {
    transform: scaleY(0.4);
  }
  50%{
    transform: scaleY(1);
  }
}
